---
description: Python code standards and best practices to follow throughout the project
globs: **/*.py
---

# Code Standards

## General Guidelines

1. **Code Organization**
   - Keep files under 300 lines
   - One concept per file
   - Clear file/folder structure
   - Logical code grouping

2. **Code Style**
   - Follow PEP 8 style guide
   - Consistent naming conventions
   - Clear and meaningful names
   - Proper indentation and spacing

3. **Documentation**
   - Self-documenting code principles
   - Required documentation sections
   - API documentation standards
   - Comment guidelines

## Python Standards

1. **Python Style**
   - Follow PEP 8 style guide
   - Python 3.11+ compatibility required
   - Black formatting with 88 character line length
   - Pylint configuration adherence
   - Type hints required for function signatures
   - Docstring format (Numpy style)
   - Module-level organization
   - Pandas optimization practices for financial computations

2. **Dependency Management**
   - Use PDM for package management
   - Clear version constraints required
   - Organize dependencies into logical groups
   - Regular dependency updates and security checks
   - Document all dependency changes

## Code Quality

1. **Code Review Process**
   - Pre-review checklist
   - Review criteria
   - Feedback guidelines
   - Follow-up procedures

2. **Clean Code Principles**
   - DRY (Don't Repeat Yourself)
   - SOLID principles
   - Design patterns usage
   - Code smells to avoid

3. **Error Handling**
   - Exception handling patterns
   - Error reporting standards
   - Logging requirements
   - Debug information

## Performance Standards

1. **Optimization Guidelines**
   - Performance best practices
   - Resource usage patterns
   - Memory management
   - Algorithmic efficiency
   - Pandas performance optimization:
     * Use appropriate data types
     * Vectorized operations preferred
     * Minimize DataFrame copies
     * Use efficient financial computation methods

2. **Financial Computation Standards**
   - Decimal precision requirements
   - Numerical stability considerations
   - Date and time handling best practices
   - Financial calculation validation
   - Performance benchmarking for critical operations

## Security Standards

1. **Secure Coding**
   - Input validation
   - Data sanitization
   - Authentication practices
   - Authorization checks

2. **Data Protection**
   - Sensitive data handling
   - Encryption standards
   - Secure communication
   - Access control

## Implementation

1. **Tools and Automation**
   - Black formatter configuration
   - Pylint with project-specific rules
   - PDM dependency management
   - IDE settings
   - Pre-commit hooks
   - Static type checking setup

2. **Monitoring and Metrics**
   - Code quality metrics
   - Performance monitoring
   - Security scanning
   - Technical debt tracking

## Meta
- Source: references/cursor/project-rules/code_rules.md
- Repository: https://github.com/phil71x/references
- Last Updated: 2024-04-07 